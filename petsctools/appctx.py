import itertools
from functools import cached_property
from petsctools.exceptions import PetscToolsAppctxException


class AppContextKey(int):
    """A custom key type for AppContext."""


class AppContext:
    """
    Class for passing non-primitive types to PETSc python contexts.

    The PETSc.Options dictionary can only contain primitive types (str,
    int, float, bool) as values. The AppContext allows other types to be
    passed into PETSc solvers while still making use of the namespacing
    provided by options prefixing.

    A typical usage is shown below. In this example we have a python PC
    type `MyCustomPC` which requires additional data in the form of a
    `MyCustomData` instance.
    We can add the data to the AppContext with the `appctx.add` method,
    but we need to tell `MyCustomPC` how to retrieve that data. The
    `add` method returns a key which is a valid PETSc.Options entry,
    i.e. a primitive type instance. This key is passed via PETSc.Options
    with the 'custompc_somedata' prefix.

    NB: The user should never handle this key directly, it should only
        ever be placed directly into the options dictionary.

    The data can be retrieved by giving the AppContext the (fully
    prefixed) option for the key, in which case the AppContext will
    internally fetch the key from the PETSc.Options and return the data.

    .. code-block:: python3

        appctx = AppContext()
        some_data = MyCustomData(5)

        opts = OptionsManager(
            parameters={
                'pc_type': 'python',
                'pc_python_type': 'MyCustomPC',
                'custompc_somedata': appctx.add(some_data)},
            options_prefix='solver')

        with opts.inserted_options():
            default = MyCustomData(10)
            data = appctx.get('solver_custompc_somedata', default)
    """

    def __init__(self):
        self._count = itertools.count(start=0)
        self._data = {}

    def _keygen(self):
        """
        Generate a new unique internal key.

        This should not called directly by the user.
        """
        return AppContextKey(next(self._count))

    def getKey(self, option):
        """
        Return the internal key for the PETSc option `option`.

        Parameters
        ----------
        option : str
            The PETSc option.

        Returns
        -------
        key : AppContextKey
            An internal key corresponding to `option`.
        """
        return AppContextKey(self.options_object.getInt(option))

    def add(self, val):
        """
        Add a value to the application context and
        return the autogenerated key for that value.

        The autogenerated key should be used as the value for the
        corresponding entry in the solver_parameters dictionary.

        Parameters
        ----------
        val : Any
            The value to add to the AppContext.

        Returns
        -------
        key : AppContextKey
            The key to put into the PETSc Options dictionary.
        """
        key = self._keygen()
        self._data[key] = val
        return key

    def __getitem__(self, option):
        """
        Return the value with the key saved in `PETSc.Options()[option]`.

        Parameters
        ----------
        option : Union[str, AppContextKey]
            The PETSc option or key.

        Returns
        -------
        val : Any
            The value for the key `option`.

        Raises
        ------
        PetscToolsAppctxException
            If the AppContext does contain a value for `option`.
        """
        try:
            return self._data[self.getKey(option)]
        except KeyError:
            raise PetscToolsAppctxException(
                f"AppContext does not have an entry for {option}")

    def get(self, option, default=None):
        """
        Return the value with the key saved in PETSc.Options()[option],
        or if it does not exist return default.

        Parameters
        ----------
        option : Union[str, AppContextKey]
            The PETSc option or key.
        default : Any
            The value to return if `option` is not in the AppContext

        Returns
        -------
        val : Any
            The value for the key `option`, or `default`.
        """
        try:
            return self[option]
        except PetscToolsAppctxException:
            return default

    @cached_property
    def options_object(self):
        """A PETSc.Options instance."""
        from petsc4py import PETSc
        return PETSc.Options()
