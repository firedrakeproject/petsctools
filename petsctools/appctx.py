import itertools
from functools import cached_property
from petsctools.exceptions import PetscToolsAppctxException


class _AppContextKey(int):
    """A custom key type for AppContext."""
    pass


class AppContext:
    """

    .. code-block:: python3

        appctx = AppContext()
        some_data = MyCustomObject()

        opts = OptionsManager(
            parameters={
                'pc_type': 'python',
                'pc_python_type': 'MyCustomPC',
                'custompc_somedata': appctx.add(some_data)},
            options_prefix="")

        with opts.inserted_options():
            data = appctx.get('custompc_somedata')

    """

    def __init__(self):
        self._count = itertools.count()
        self._data = {}

    def _keygen(self, key=None):
        """
        Generate a new internal key, optionally with a given value.
        """
        return _AppContextKey(next(self._count) if key is None else key)

    def _option_to_key(self, option):
        """
        Return the internal key for the parameter `option`.
        """
        key = self.options_object.getInt(option, self._missing_key)
        return self._keygen(key)

    @cached_property
    def _missing_key(self):
        """
        Key instance representing a missing AppContext entry.

        PETSc requires the default value for Options.getObj()
        to be the correct type, so we need a dummy key.
        """
        return self._keygen()

    def add(self, val):
        """
        Add a value to the application context and
        return the autogenerated key for that value.

        The autogenerated key should be used as the value for the
        corresponding entry in the solver_parameters dictionary.
        """
        key = self._keygen()
        self._data[key] = val
        return key

    def __getitem__(self, option):
        """
        Return the value with the key saved in `PETSc.Options()[option]`.
        """
        try:
            return self._data[self._option_to_key(option)]
        except KeyError:
            raise PetscToolsAppctxException(
                f"AppContext does not have an entry for {option}")

    def get(self, option, default=None):
        """
        Return the value with the key saved in PETSc.Options()[option],
        or if it does not exist return default.
        """
        key = self._option_to_key(option)
        if key == self._missing_key:
            return default
        return self._data[key]

    @cached_property
    def options_object(self):
        """A PETSc.Options instance."""
        from petsc4py import PETSc
        return PETSc.Options()
